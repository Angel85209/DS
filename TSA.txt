Ptactical no 1
AIM: Fitting and plotting of modified exponential curve.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

gold_rates = pd.read_csv("C:/Users/Satish/Downloads/Gold.csv")

gold_rates

# Plot the time series to visualize the data
plt.figure(figsize=(12, 6))
plt.plot(gold_rates['VALUE'], label='Gold Rates')
plt.title('Gold Rates Over Time')
plt.xlabel('Date')
plt.ylabel('Value')
plt.legend()
plt.show()

# Ensure DATE is converted to a datetime type and sorted
gold_rates['DATE'] = pd.to_datetime(gold_rates['DATE'])
gold_rates.sort_values('DATE', inplace=True)

# Convert dates to a numerical format for fitting (e.g., days since start)
gold_rates['Time'] = (gold_rates['DATE'] - gold_rates['DATE'].min()).dt.days

# Define the model for the modified exponential curve
def mod_exp_func(t, a, b, c):
    return a * np.exp(b * t) + c


gold_rates

from scipy.optimize import curve_fit
# Fit the model to the data
initial_guess = [1, 0.001, gold_rates['VALUE'].min()]  # Adjust these values as needed
params, covariance = curve_fit(mod_exp_func, gold_rates['Time'], gold_rates['VALUE'], p0=initial_guess)

# Use the optimized parameters to plot the fitted curve
t_fit = np.linspace(gold_rates['Time'].min(), gold_rates['Time'].max(), 1000)
y_fit = mod_exp_func(t_fit, *params)

# Plotting the original data and the fitted curve
plt.figure(figsize=(12, 6))
plt.plot(gold_rates['DATE'], gold_rates['VALUE'], 'o', label='Original Data')
plt.plot(gold_rates['DATE'].min() + pd.to_timedelta(t_fit, unit='D'), y_fit, '-', label='Fitted Curve')
plt.title('Gold Rates and Fitted Modified Exponential Curve')
plt.xlabel('Date')
plt.ylabel('Gold Rate')
plt.legend()
plt.show()

Practical no 2
AIM: Fitting and plotting of Gompertz curve

P 3
AIM: Fitting and plotting of logistic curve

P 4
Aim : moving average

P 5
Aim : Ration to trend